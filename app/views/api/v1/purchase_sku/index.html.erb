<div id="app">
  <q-layout view="hHh Lpr lff">
    <!-- Header -->
    <q-header elevated class="bg-primary">
      <q-toolbar>
        <q-btn flat @click="goToDashboard" icon="arrow_back" label="Dashboard"></q-btn>
        <q-separator vertical inset class="q-mx-sm"></q-separator>
        <q-icon name="shopping_bag" size="md" class="q-mr-sm"></q-icon>
        <q-toolbar-title>Purchase Order Management</q-toolbar-title>
        <q-space></q-space>
        <q-btn flat @click="logout" icon="logout" label="Logout"></q-btn>
      </q-toolbar>
    </q-header>

    <!-- Page Content -->
    <q-page-container>
      <q-page class="q-pa-md">
        
        <!-- Page Header with Summary -->
        <div class="row items-center justify-between q-mb-lg">
          <div>
            <div class="text-h4 q-mb-sm">
              <q-icon name="shopping_bag" class="q-mr-sm"></q-icon>
              Purchase Orders
            </div>
            <div class="text-subtitle1 text-grey-7">
              Manage inventory purchases and vendor relationships
            </div>
          </div>
          <div class="row q-gutter-sm">
            <q-btn 
              color="secondary" 
              icon="analytics" 
              label="Analytics" 
              size="md"
              @click="showAnalytics = true"
              outline
            ></q-btn>
            <q-btn 
              color="primary" 
              icon="add_shopping_cart" 
              label="New Purchase" 
              size="lg"
              @click="showCreateDialog = true"
              class="q-px-lg"
            ></q-btn>
          </div>
        </div>

        <!-- Summary Cards -->
        <div class="row q-gutter-md q-mb-lg">
          <div class="col-12 col-md-3">
            <q-card class="bg-blue-1">
              <q-card-section class="text-center">
                <q-icon name="shopping_cart" size="lg" color="blue"></q-icon>
                <div class="text-h6 q-mt-sm">{{ summary.total_purchases || 0 }}</div>
                <div class="text-caption text-grey-7">Total Purchases</div>
              </q-card-section>
            </q-card>
          </div>
          <div class="col-12 col-md-3">
            <q-card class="bg-green-1">
              <q-card-section class="text-center">
                <q-icon name="account_balance_wallet" size="lg" color="green"></q-icon>
                <div class="text-h6 q-mt-sm">â‚¹{{ formatCurrency(summary.total_value) }}</div>
                <div class="text-caption text-grey-7">Total Value</div>
              </q-card-section>
            </q-card>
          </div>
          <div class="col-12 col-md-3">
            <q-card class="bg-orange-1">
              <q-card-section class="text-center">
                <q-icon name="calendar_today" size="lg" color="orange"></q-icon>
                <div class="text-h6 q-mt-sm">â‚¹{{ formatCurrency(summary.this_month_value) }}</div>
                <div class="text-caption text-grey-7">This Month</div>
              </q-card-section>
            </q-card>
          </div>
          <div class="col-12 col-md-3">
            <q-card class="bg-purple-1">
              <q-card-section class="text-center">
                <q-icon name="trending_up" size="lg" color="purple"></q-icon>
                <div class="text-h6 q-mt-sm">â‚¹{{ formatCurrency(summary.this_year_value) }}</div>
                <div class="text-caption text-grey-7">This Year</div>
              </q-card-section>
            </q-card>
          </div>
        </div>

        <!-- Filters Card -->
        <q-card class="q-mb-lg">
          <q-card-section>
            <div class="text-h6 q-mb-md">
              <q-icon name="filter_list" class="q-mr-sm"></q-icon>
              Filters
            </div>
            <div class="row q-gutter-md">
              <div class="col-12 col-md-2">
                <q-select
                  v-model="filters.by_branch"
                  filled
                  label="Branch"
                  :options="branchOptions"
                  option-value="value"
                  option-label="label"
                  emit-value
                  map-options
                  clearable
                ></q-select>
              </div>
              <div class="col-12 col-md-3">
                <q-select
                  v-model="filters.by_product"
                  filled
                  label="Product"
                  :options="productOptions"
                  option-value="value"
                  option-label="label"
                  emit-value
                  map-options
                  clearable
                ></q-select>
              </div>
              <div class="col-12 col-md-2">
                <q-input
                  v-model="filters.by_vendor"
                  filled
                  label="Vendor"
                  placeholder="Vendor name"
                  clearable
                ></q-input>
              </div>
              <div class="col-12 col-md-2">
                <q-input
                  v-model="filters.start_date"
                  filled
                  label="From Date"
                  type="date"
                ></q-input>
              </div>
              <div class="col-12 col-md-2">
                <q-input
                  v-model="filters.end_date"
                  filled
                  label="To Date"
                  type="date"
                ></q-input>
              </div>
              <div class="col-12 col-md-1">
                <q-btn
                  color="primary"
                  icon="search"
                  label="Search"
                  @click="loadPurchases"
                  class="full-width"
                ></q-btn>
              </div>
            </div>
          </q-card-section>
        </q-card>

        <!-- Purchases Table -->
        <q-card>
          <q-card-section>
            <q-table
              :rows="purchases"
              :columns="columns"
              :loading="loading"
              :pagination="pagination"
              @request="onRequest"
              row-key="id"
              flat
              bordered
            >
              <template v-slot:body-cell-branch_name="props">
                <q-td :props="props">
                  <q-badge color="blue" outline>
                    {{ props.value }}
                  </q-badge>
                </q-td>
              </template>

              <template v-slot:body-cell-product_info="props">
                <q-td :props="props">
                  <div class="text-weight-medium">{{ props.row.product_name }}</div>
                  <div class="text-caption text-grey-7">{{ props.row.product_code }}</div>
                </q-td>
              </template>

              <template v-slot:body-cell-quantity="props">
                <q-td :props="props">
                  <q-chip color="primary" text-color="white" dense>
                    {{ props.value }} units
                  </q-chip>
                </q-td>
              </template>

              <template v-slot:body-cell-unit_cost_price="props">
                <q-td :props="props">
                  â‚¹{{ formatCurrency(props.value) }}
                </q-td>
              </template>

              <template v-slot:body-cell-total_cost_price="props">
                <q-td :props="props">
                  <div class="text-weight-bold text-positive">
                    â‚¹{{ formatCurrency(props.value) }}
                  </div>
                </q-td>
              </template>

              <template v-slot:body-cell-vendor_info="props">
                <q-td :props="props">
                  <div class="text-weight-medium">{{ props.row.vendor_name }}</div>
                  <div class="text-caption text-grey-7" v-if="props.row.vendor_mobile_number">
                    ðŸ“± {{ props.row.vendor_mobile_number }}
                  </div>
                </q-td>
              </template>

              <template v-slot:body-cell-purchase_date="props">
                <q-td :props="props">
                  {{ props.row.formatted_purchase_date }}
                </q-td>
              </template>

              <template v-slot:body-cell-actions="props">
                <q-td :props="props">
                  <q-btn-group flat>
                    <q-btn
                      flat
                      dense
                      color="primary"
                      icon="visibility"
                      @click="viewPurchase(props.row.id)"
                    >
                      <q-tooltip>View Details</q-tooltip>
                    </q-btn>
                    <q-btn
                      flat
                      dense
                      color="orange"
                      icon="edit"
                      @click="editPurchase(props.row)"
                    >
                      <q-tooltip>Edit Purchase</q-tooltip>
                    </q-btn>
                    <q-btn
                      flat
                      dense
                      color="red"
                      icon="delete"
                      @click="deletePurchase(props.row)"
                    >
                      <q-tooltip>Delete Purchase</q-tooltip>
                    </q-btn>
                  </q-btn-group>
                </q-td>
              </template>
            </q-table>
          </q-card-section>
        </q-card>

        <!-- Create/Edit Dialog -->
        <q-dialog v-model="showCreateDialog" persistent max-width="800px">
          <q-card style="min-width: 700px;">
            <q-card-section>
              <div class="text-h6">{{ editingPurchase ? 'Edit Purchase Order' : 'Create New Purchase Order' }}</div>
            </q-card-section>

            <q-card-section>
              <q-form @submit="savePurchase" class="q-gutter-md">
                <div class="row q-gutter-md">
                  <div class="col">
                    <q-select
                      v-model="purchaseForm.branch_id"
                      filled
                      label="Branch *"
                      :options="branchOptions"
                      option-value="value"
                      option-label="label"
                      emit-value
                      map-options
                      :rules="[val => !!val || 'Branch is required']"
                    >
                      <template v-slot:prepend>
                        <q-icon name="store"></q-icon>
                      </template>
                    </q-select>
                  </div>
                  <div class="col">
                    <q-select
                      v-model="purchaseForm.product_sku_id"
                      filled
                      label="Product *"
                      :options="productOptions"
                      option-value="value"
                      option-label="label"
                      emit-value
                      map-options
                      :rules="[val => !!val || 'Product is required']"
                    >
                      <template v-slot:prepend>
                        <q-icon name="inventory"></q-icon>
                      </template>
                    </q-select>
                  </div>
                </div>

                <div class="row q-gutter-md">
                  <div class="col">
                    <q-input
                      v-model.number="purchaseForm.quantity"
                      filled
                      label="Quantity *"
                      type="number"
                      min="1"
                      :rules="[val => val > 0 || 'Quantity must be greater than 0']"
                      @input="calculateTotal"
                    >
                      <template v-slot:prepend>
                        <q-icon name="confirmation_number"></q-icon>
                      </template>
                    </q-input>
                  </div>
                  <div class="col">
                    <q-input
                      v-model.number="purchaseForm.unit_cost_price"
                      filled
                      label="Unit Cost Price *"
                      type="number"
                      step="0.01"
                      min="0.01"
                      :rules="[val => val > 0 || 'Unit price must be greater than 0']"
                      @input="calculateTotal"
                    >
                      <template v-slot:prepend>
                        <q-icon name="currency_rupee"></q-icon>
                      </template>
                    </q-input>
                  </div>
                  <div class="col">
                    <q-input
                      v-model="calculatedTotal"
                      filled
                      label="Total Cost"
                      readonly
                      bg-color="grey-2"
                    >
                      <template v-slot:prepend>
                        <q-icon name="calculate"></q-icon>
                      </template>
                    </q-input>
                  </div>
                </div>

                <q-input
                  v-model="purchaseForm.vendor_name"
                  filled
                  label="Vendor Name *"
                  :rules="[val => !!val || 'Vendor name is required']"
                >
                  <template v-slot:prepend>
                    <q-icon name="business"></q-icon>
                  </template>
                </q-input>

                <q-input
                  v-model="purchaseForm.vendor_address"
                  filled
                  label="Vendor Address"
                  type="textarea"
                  rows="2"
                >
                  <template v-slot:prepend>
                    <q-icon name="location_on"></q-icon>
                  </template>
                </q-input>

                <div class="row q-gutter-md">
                  <div class="col">
                    <q-input
                      v-model="purchaseForm.vendor_mobile_number"
                      filled
                      label="Vendor Mobile"
                      maxlength="10"
                      :rules="[
                        val => !val || val.length === 10 || 'Must be 10 digits',
                        val => !val || /^[0-9]+$/.test(val) || 'Only numbers allowed'
                      ]"
                    >
                      <template v-slot:prepend>
                        <q-icon name="phone"></q-icon>
                      </template>
                    </q-input>
                  </div>
                  <div class="col">
                    <q-input
                      v-model="purchaseForm.purchase_date"
                      filled
                      label="Purchase Date *"
                      type="date"
                      :rules="[val => !!val || 'Purchase date is required']"
                    >
                      <template v-slot:prepend>
                        <q-icon name="event"></q-icon>
                      </template>
                    </q-input>
                  </div>
                </div>
              </q-form>
            </q-card-section>

            <q-card-actions align="right">
              <q-btn flat label="Cancel" @click="closeDialog"></q-btn>
              <q-btn 
                color="primary" 
                :label="editingPurchase ? 'Update Purchase' : 'Create Purchase'" 
                @click="savePurchase"
                :loading="saving"
              ></q-btn>
            </q-card-actions>
          </q-card>
        </q-dialog>

      </q-page>
    </q-page-container>
  </q-layout>
</div>

<script src="https://cdn.jsdelivr.net/npm/vue@3.3.4/dist/vue.global.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/quasar@2.14.2/dist/quasar.umd.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
  const app = Vue.createApp({
    data() {
      return {
        purchases: [],
        loading: false,
        saving: false,
        showCreateDialog: false,
        showAnalytics: false,
        editingPurchase: null,
        branchOptions: [],
        productOptions: [],
        summary: {
          total_purchases: 0,
          total_value: 0,
          this_month_value: 0,
          this_year_value: 0
        },
        filters: {
          by_branch: '',
          by_product: '',
          by_vendor: '',
          start_date: '',
          end_date: ''
        },
        purchaseForm: {
          branch_id: null,
          product_sku_id: null,
          quantity: 1,
          unit_cost_price: 0,
          vendor_name: '',
          vendor_address: '',
          vendor_mobile_number: '',
          purchase_date: new Date().toISOString().split('T')[0]
        },
        pagination: {
          sortBy: 'purchase_date',
          descending: true,
          page: 1,
          rowsPerPage: 10,
          rowsNumber: 0
        },
        columns: [
          { name: 'branch_name', label: 'Branch', align: 'left', field: 'branch_name', sortable: true },
          { name: 'product_info', label: 'Product', align: 'left', field: 'product_name' },
          { name: 'quantity', label: 'Quantity', align: 'center', field: 'quantity', sortable: true },
          { name: 'unit_cost_price', label: 'Unit Price', align: 'right', field: 'unit_cost_price', sortable: true },
          { name: 'total_cost_price', label: 'Total', align: 'right', field: 'total_cost_price', sortable: true },
          { name: 'vendor_info', label: 'Vendor', align: 'left', field: 'vendor_name' },
          { name: 'purchase_date', label: 'Date', align: 'left', field: 'purchase_date', sortable: true },
          { name: 'actions', label: 'Actions', align: 'center' }
        ]
      }
    },
    computed: {
      calculatedTotal() {
        const quantity = this.purchaseForm.quantity || 0;
        const unitPrice = this.purchaseForm.unit_cost_price || 0;
        return `â‚¹${this.formatCurrency(quantity * unitPrice)}`;
      }
    },
    mounted() {
      this.loadOptions();
      this.loadPurchases();
    },
    methods: {
      async loadOptions() {
        try {
          const response = await fetch('/aruna_solar/api/v1/purchase_skus/options', {
            headers: {
              'Accept': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
          });

          const data = await response.json();
          
          if (response.ok) {
            this.branchOptions = data.branches.map(([name, id]) => ({
              label: name,
              value: id
            }));
            
            this.productOptions = data.product_skus.map(([name, id, code]) => ({
              label: `${name} (${code})`,
              value: id
            }));
          }
        } catch (error) {
          console.error('Error loading options:', error);
        }
      },

      async loadPurchases() {
        this.loading = true;
        try {
          // Clean the filters to remove null/undefined/empty values
          const cleanFilters = {};
          Object.keys(this.filters).forEach(key => {
            const value = this.filters[key];
            if (value !== null && value !== undefined && value !== '' && value !== 'null') {
              cleanFilters[key] = value;
            }
          });

          const params = new URLSearchParams({
            page: this.pagination.page,
            per_page: this.pagination.rowsPerPage,
            ...cleanFilters
          });

          const response = await fetch(`/aruna_solar/api/v1/purchase_skus/list?${params}`, {
            headers: {
              'Accept': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
          });

          const data = await response.json();
          
          if (response.ok) {
            this.purchases = data.data.purchase_skus;
            this.pagination.rowsNumber = data.data.pagination.total_count;
            this.summary = data.data.summary;
          } else {
            throw new Error(data.message || 'Failed to load purchases');
          }
        } catch (error) {
          this.$q.notify({
            type: 'negative',
            message: error.message
          });
        } finally {
          this.loading = false;
        }
      },

      onRequest(props) {
        this.pagination = props.pagination;
        this.loadPurchases();
      },

      resetForm() {
        this.purchaseForm = {
          branch_id: null,
          product_sku_id: null,
          quantity: 1,
          unit_cost_price: 0,
          vendor_name: '',
          vendor_address: '',
          vendor_mobile_number: '',
          purchase_date: new Date().toISOString().split('T')[0]
        };
        this.editingPurchase = null;
      },

      editPurchase(purchase) {
        this.editingPurchase = purchase;
        this.purchaseForm = { ...purchase };
        this.showCreateDialog = true;
      },

      calculateTotal() {
        // The computed property handles this automatically
      },

      async savePurchase() {
        // Validation
        if (!this.purchaseForm.branch_id || !this.purchaseForm.product_sku_id || 
            !this.purchaseForm.quantity || !this.purchaseForm.unit_cost_price || 
            !this.purchaseForm.vendor_name || !this.purchaseForm.purchase_date) {
          this.$q.notify({
            type: 'negative',
            message: 'Please fill in all required fields'
          });
          return;
        }

        this.saving = true;
        try {
          const url = this.editingPurchase 
            ? `/aruna_solar/api/v1/purchase_skus/${this.editingPurchase.id}`
            : '/aruna_solar/api/v1/purchase_skus';
          
          const method = this.editingPurchase ? 'PUT' : 'POST';

          const response = await fetch(url, {
            method: method,
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ purchase_sku: this.purchaseForm })
          });

          const data = await response.json();

          if (response.ok) {
            this.$q.notify({
              type: 'positive',
              message: data.message
            });
            this.closeDialog();
            this.loadPurchases();
          } else {
            throw new Error(data.errors.join(', ') || data.message);
          }
        } catch (error) {
          this.$q.notify({
            type: 'negative',
            message: error.message
          });
        } finally {
          this.saving = false;
        }
      },

      deletePurchase(purchase) {
        this.$q.dialog({
          title: 'Confirm Delete',
          message: `Are you sure you want to delete this purchase order for "${purchase.product_name}"?`,
          cancel: true,
          persistent: true
        }).onOk(async () => {
          try {
            const response = await fetch(`/aruna_solar/api/v1/purchase_skus/${purchase.id}`, {
              method: 'DELETE',
              headers: {
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
              }
            });

            const data = await response.json();

            if (response.ok) {
              this.$q.notify({
                type: 'positive',
                message: data.message
              });
              this.loadPurchases();
            } else {
              throw new Error(data.message);
            }
          } catch (error) {
            this.$q.notify({
              type: 'negative',
              message: error.message
            });
          }
        });
      },

      formatCurrency(amount) {
        return new Intl.NumberFormat('en-IN').format(amount || 0);
      },

      viewPurchase(purchaseId) {
        window.location.href = `/purchase_skus/${purchaseId}`;
      },

      closeDialog() {
        this.showCreateDialog = false;
        this.resetForm();
      },

      goToDashboard() {
        window.location.href = '/dashboard';
      },

      logout() {
        fetch('/logout', {
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          }
        }).then(() => {
          window.location.href = '/login';
        });
      }
    }
  }).use(Quasar);
  
  app.mount('#app');
});
</script>