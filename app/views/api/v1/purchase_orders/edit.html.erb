<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Edit Purchase Order - Aruna Solar</title>
  
  <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900|Material+Icons" rel="stylesheet" type="text/css">
  <link href="https://cdn.jsdelivr.net/npm/quasar@2.14.2/dist/quasar.prod.css" rel="stylesheet" type="text/css">
</head>
<body>
<div id="app">
  <q-layout view="hHh Lpr lff">
    <!-- Header -->
    <q-header elevated class="bg-primary">
      <q-toolbar>
        <q-btn flat @click="goBack" icon="arrow_back" label="Back to Orders"></q-btn>
        <q-separator vertical inset class="q-mx-sm"></q-separator>
        <q-icon name="edit" size="md" class="q-mr-sm"></q-icon>
        <q-toolbar-title>Edit Purchase Order</q-toolbar-title>
        <q-space></q-space>
        <q-btn flat @click="logout" icon="logout" label="Logout"></q-btn>
      </q-toolbar>
    </q-header>

    <!-- Page Content -->
    <q-page-container>
      <q-page class="q-pa-md">
        
        <!-- Page Header -->
        <div class="row items-center q-mb-lg">
          <q-icon name="edit" size="xl" color="orange" class="q-mr-md"></q-icon>
          <div>
            <div class="text-h4 q-mb-xs">Edit Purchase Order</div>
            <div class="text-subtitle1 text-grey-7">
              PO Number: <strong><%= @purchase_order.po_number %></strong>
            </div>
          </div>
        </div>

        <!-- Form Card -->
        <div class="row q-gutter-lg">
          <div class="col-12 col-lg-8">
            <q-card>
              <q-card-section>
                <div class="text-h6 q-mb-md">
                  <q-icon name="info" class="q-mr-sm"></q-icon>
                  Order Information
                </div>

                <q-form @submit="updateOrder" class="q-gutter-md">
                  <div class="row q-gutter-md">
                    <div class="col-12 col-md-5">
                      <q-select
                        v-model="orderForm.branch_id"
                        filled
                        label="Branch *"
                        :options="branchOptions"
                        option-value="value"
                        option-label="label"
                        emit-value
                        map-options
                        :rules="[val => !!val || 'Branch is required']"
                      >
                        <template v-slot:prepend>
                          <q-icon name="store"></q-icon>
                        </template>
                      </q-select>
                    </div>
                    <div class="col-12 col-md-5">
                      <q-input
                        v-model="orderForm.purchase_date"
                        filled
                        label="Purchase Date *"
                        type="date"
                        :rules="[val => !!val || 'Purchase date is required']"
                      >
                        <template v-slot:prepend>
                          <q-icon name="event"></q-icon>
                        </template>
                      </q-input>
                    </div>
                  </div>

                  <q-separator class="q-my-lg"></q-separator>

                  <div class="text-h6 q-mb-md">
                    <q-icon name="business" class="q-mr-sm"></q-icon>
                    Vendor Information
                  </div>

                  <q-input
                    v-model="orderForm.vendor_name"
                    filled
                    label="Vendor Name *"
                    :rules="[val => !!val || 'Vendor name is required']"
                  >
                    <template v-slot:prepend>
                      <q-icon name="business"></q-icon>
                    </template>
                  </q-input>

                  <q-input
                    v-model="orderForm.vendor_address"
                    filled
                    label="Vendor Address"
                    type="textarea"
                    rows="2"
                  >
                    <template v-slot:prepend>
                      <q-icon name="location_on"></q-icon>
                    </template>
                  </q-input>

                  <div class="row q-gutter-md">
                    <div class="col">
                      <q-input
                        v-model="orderForm.vendor_mobile_number"
                        filled
                        label="Mobile Number"
                        mask="##########"
                        :rules="[
                          val => !val || val.length === 10 || 'Must be 10 digits',
                          val => !val || /^[0-9]+$/.test(val) || 'Only numbers allowed'
                        ]"
                      >
                        <template v-slot:prepend>
                          <q-icon name="phone"></q-icon>
                        </template>
                      </q-input>
                    </div>
                    <div class="col">
                      <q-input
                        v-model="orderForm.vendor_gst_number"
                        filled
                        label="GST Number"
                        mask="##AAAAA####A#A#"
                        hint="Format: 15 characters"
                      >
                        <template v-slot:prepend>
                          <q-icon name="receipt_long"></q-icon>
                        </template>
                      </q-input>
                    </div>
                  </div>

                  <q-input
                    v-model="orderForm.notes"
                    filled
                    label="Notes"
                    type="textarea"
                    rows="3"
                  >
                    <template v-slot:prepend>
                      <q-icon name="notes"></q-icon>
                    </template>
                  </q-input>

                  <q-separator class="q-my-lg"></q-separator>

                  <div class="text-h6 q-mb-md">
                    <q-icon name="inventory" class="q-mr-sm"></q-icon>
                    Order Items
                  </div>

                  <!-- Add New Item -->
                  <q-card class="bg-grey-1">
                    <q-card-section>
                      <div class="text-subtitle2 q-mb-sm">Add New Item</div>
                      <div class="row q-gutter-sm">
                        <div class="col-12 col-md-5">
                          <q-select
                            v-model="newItem.product_sku_id"
                            filled
                            label="Product"
                            :options="productOptions"
                            option-value="id"
                            option-label="label"
                            emit-value
                            map-options
                            use-input
                            input-debounce="300"
                            @filter="filterProducts"
                            :loading="searchingProducts"
                            dense
                          >
                            <template v-slot:prepend>
                              <q-icon name="search"></q-icon>
                            </template>
                            <template v-slot:no-option>
                              <q-item>
                                <q-item-section class="text-grey">
                                  Start typing to search products...
                                </q-item-section>
                              </q-item>
                            </template>
                          </q-select>
                        </div>
                        <div class="col">
                          <q-input
                            v-model.number="newItem.quantity"
                            filled
                            label="Qty"
                            type="number"
                            min="1"
                            dense
                          ></q-input>
                        </div>
                        <div class="col">
                          <q-input
                            v-model.number="newItem.unit_cost_price"
                            filled
                            label="Unit Price"
                            type="number"
                            step="0.01"
                            min="0.01"
                            dense
                          ></q-input>
                        </div>
                        <div class="col-auto">
                          <q-btn
                            color="primary"
                            icon="add"
                            @click="addItem"
                            :disable="!canAddItem"
                            dense
                          ></q-btn>
                        </div>
                      </div>
                    </q-card-section>
                  </q-card>

                  <!-- Existing Items -->
                  <q-list separator bordered class="q-mt-md">
                    <q-item v-for="item in orderItems" :key="item.id || item.temp_id">
                      <q-item-section>
                        <q-item-label class="text-weight-medium">
                          {{ item.product_name }}
                        </q-item-label>
                        <q-item-label caption>
                          {{ item.product_code }}
                        </q-item-label>
                      </q-item-section>
                      
                      <q-item-section side>
                        <div class="row q-gutter-sm items-center">
                          <q-input
                            v-model.number="item.quantity"
                            type="number"
                            min="1"
                            dense
                            outlined
                            style="width: 80px"
                            @update:model-value="updateItemTotal(item)"
                          ></q-input>
                          <div>×</div>
                          <q-input
                            v-model.number="item.unit_cost_price"
                            type="number"
                            step="0.01"
                            min="0.01"
                            dense
                            outlined
                            style="width: 100px"
                            @update:model-value="updateItemTotal(item)"
                          ></q-input>
                          <div>=</div>
                          <div class="text-weight-bold" style="width: 100px">
                            ₹{{ formatCurrency(item.total_price) }}
                          </div>
                          <q-btn
                            flat
                            dense
                            color="red"
                            icon="delete"
                            @click="removeItem(item)"
                          ></q-btn>
                        </div>
                      </q-item-section>
                    </q-item>
                  </q-list>

                  <div class="row items-center justify-between q-mt-lg">
                    <q-btn 
                      flat
                      color="grey-7"
                      label="Cancel" 
                      @click="goBack"
                      size="lg"
                    ></q-btn>
                    <q-btn 
                      color="orange" 
                      label="Update Order" 
                      type="submit"
                      icon="save"
                      :loading="saving"
                      size="lg"
                      class="q-px-xl"
                    ></q-btn>
                  </div>
                </q-form>
              </q-card-section>
            </q-card>
          </div>

          <!-- Summary Card -->
          <div class="col-12 col-lg-4">
            <q-card class="bg-grey-1">
              <q-card-section>
                <div class="text-h6 q-mb-md">
                  <q-icon name="summarize" class="q-mr-sm"></q-icon>
                  Order Summary
                </div>
                
                <q-list>
                  <q-item>
                    <q-item-section>
                      <q-item-label>PO Number</q-item-label>
                    </q-item-section>
                    <q-item-section side>
                      <q-item-label class="text-weight-bold">
                        <%= @purchase_order.po_number %>
                      </q-item-label>
                    </q-item-section>
                  </q-item>
                  
                  <q-item>
                    <q-item-section>
                      <q-item-label>Total Items</q-item-label>
                    </q-item-section>
                    <q-item-section side>
                      <q-chip color="primary" text-color="white" dense>
                        {{ orderItems.length }}
                      </q-chip>
                    </q-item-section>
                  </q-item>
                  
                  <q-item>
                    <q-item-section>
                      <q-item-label>Total Quantity</q-item-label>
                    </q-item-section>
                    <q-item-section side>
                      <q-chip color="orange" text-color="white" dense>
                        {{ totalQuantity }}
                      </q-chip>
                    </q-item-section>
                  </q-item>
                  
                  <q-separator></q-separator>
                  
                  <q-item>
                    <q-item-section>
                      <q-item-label class="text-h6">Total Amount</q-item-label>
                    </q-item-section>
                    <q-item-section side>
                      <q-item-label class="text-h6 text-positive text-weight-bold">
                        ₹{{ formatCurrency(totalAmount) }}
                      </q-item-label>
                    </q-item-section>
                  </q-item>
                </q-list>
              </q-card-section>
            </q-card>
          </div>
        </div>

      </q-page>
    </q-page-container>
  </q-layout>
</div>

<script src="https://cdn.jsdelivr.net/npm/vue@3.3.4/dist/vue.global.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/quasar@2.14.2/dist/quasar.umd.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
  const app = Vue.createApp({
    data() {
      return {
        saving: false,
        searchingProducts: false,
        orderId: <%= @purchase_order.id %>,
        branchOptions: [],
        productOptions: [], // Start empty - only load when searching
        allProducts: [], // Keep full list for reference
        orderForm: {
          branch_id: <%= @purchase_order.branch_id %>,
          purchase_date: '<%= @purchase_order.purchase_date.strftime("%Y-%m-%d") %>',
          vendor_name: '<%= j(@purchase_order.vendor_name) %>',
          vendor_address: '<%= j(@purchase_order.vendor_address || '') %>',
          vendor_mobile_number: '<%= j(@purchase_order.vendor_mobile_number || '') %>',
          vendor_gst_number: '<%= j(@purchase_order.vendor_gst_number || '') %>',
          notes: '<%= j(@purchase_order.notes || '') %>'
        },
        newItem: {
          product_sku_id: null,
          quantity: 1,
          unit_cost_price: 0.01
        },
        orderItems: [
          <% @purchase_order_items.each_with_index do |item, index| %>
            {
              id: <%= item.id %>,
              product_sku_id: <%= item.product_sku_id %>,
              product_name: '<%= j(item.sku_name) %>',
              product_code: '<%= j(item.sku_code) %>',
              quantity: <%= item.quantity %>,
              unit_cost_price: <%= item.unit_cost_price.to_f %>,
              total_price: <%= item.total_price.to_f %>
            }<%= ',' unless index == @purchase_order_items.length - 1 %>
          <% end %>
        ],
        itemIdCounter: 1000
      }
    },
    computed: {
      canAddItem() {
        return this.newItem.product_sku_id && 
               this.newItem.quantity > 0 && 
               this.newItem.unit_cost_price >= 0.01;
      },
      totalAmount() {
        return this.orderItems.reduce((sum, item) => sum + (item.total_price || 0), 0);
      },
      totalQuantity() {
        return this.orderItems.reduce((sum, item) => sum + (item.quantity || 0), 0);
      }
    },
    mounted() {
      this.loadOptions();
    },
    methods: {
      async loadOptions() {
        try {
          const response = await fetch('/aruna_solar/api/v1/purchase_orders/options', {
            headers: {
              'Accept': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
          });

          const data = await response.json();
          
          if (response.ok) {
            this.branchOptions = data.branches.map(([name, id]) => ({
              label: name,
              value: id
            }));
            
            // Store all products but don't load them in dropdown initially
            this.allProducts = data.product_skus;
            // Start with empty options - user must search
            this.productOptions = [];
          }
        } catch (error) {
          console.error('Error loading options:', error);
        }
      },

      filterProducts(val, update) {
        this.searchingProducts = true;
        
        update(() => {
          if (val === '' || val.length < 2) {
            // Show first 5 products when no search or less than 2 characters
            this.productOptions = this.allProducts.slice(0, 5);
          } else {
            // Filter and limit to 5 results
            const needle = val.toLowerCase();
            this.productOptions = this.allProducts
              .filter(v => v.label.toLowerCase().indexOf(needle) > -1)
              .slice(0, 5);
          }
          this.searchingProducts = false;
        });
      },

      addItem() {
        if (!this.canAddItem) {
          this.$q.notify({
            type: 'warning',
            message: 'Please select a product, enter quantity > 0, and unit price >= 0.01'
          });
          return;
        }

        const product = this.allProducts.find(p => p.id === this.newItem.product_sku_id);
        
        if (!product) {
          this.$q.notify({
            type: 'warning',
            message: 'Product not found. Please select a valid product.'
          });
          return;
        }

        // Check if product already exists
        const existingItem = this.orderItems.find(item => item.product_sku_id === this.newItem.product_sku_id);
        if (existingItem) {
          this.$q.notify({
            type: 'warning',
            message: 'Product already added. Please update the existing item.'
          });
          return;
        }

        // Create new item
        const newOrderItem = {
          temp_id: this.itemIdCounter++,
          product_sku_id: this.newItem.product_sku_id,
          product_name: product.name, // Use correct property from API
          product_code: product.code, // Use correct property from API
          quantity: parseInt(this.newItem.quantity),
          unit_cost_price: parseFloat(this.newItem.unit_cost_price),
          total_price: parseInt(this.newItem.quantity) * parseFloat(this.newItem.unit_cost_price)
        };
        
        this.orderItems.push(newOrderItem);

        // Reset form
        this.newItem = {
          product_sku_id: null,
          quantity: 1,
          unit_cost_price: 0.01
        };

        this.$q.notify({
          type: 'positive',
          message: 'Item added successfully'
        });
      },

      updateItemTotal(item) {
        if (item.quantity < 1) item.quantity = 1;
        if (item.unit_cost_price < 0.01) item.unit_cost_price = 0.01;
        
        item.total_price = (item.quantity || 0) * (item.unit_cost_price || 0);
      },

      removeItem(item) {
        if (this.orderItems.length === 1) {
          this.$q.notify({
            type: 'warning',
            message: 'Purchase order must have at least one item'
          });
          return;
        }

        this.$q.dialog({
          title: 'Confirm Remove',
          message: 'Are you sure you want to remove this item?',
          cancel: true,
          persistent: true
        }).onOk(() => {
          const index = this.orderItems.findIndex(i => 
            (i.id && i.id === item.id) || (i.temp_id && i.temp_id === item.temp_id)
          );
          if (index > -1) {
            this.orderItems.splice(index, 1);
            this.$q.notify({
              type: 'positive',
              message: 'Item removed successfully'
            });
          }
        });
      },

      async updateOrder() {
        // Validation
        if (!this.orderForm.branch_id || !this.orderForm.vendor_name || 
            !this.orderForm.purchase_date || this.orderItems.length === 0) {
          this.$q.notify({
            type: 'negative',
            message: 'Please complete all required fields'
          });
          return;
        }

        // Validate all items
        const invalidItems = this.orderItems.filter(item => 
          !item.product_sku_id || 
          item.quantity < 1 || 
          item.unit_cost_price < 0.01
        );
        
        if (invalidItems.length > 0) {
          this.$q.notify({
            type: 'negative',
            message: 'All items must have valid product, quantity ≥ 1, and unit price ≥ 0.01'
          });
          return;
        }

        // Process items
        const processedItems = this.orderItems.map(item => {
          const itemData = {
            product_sku_id: item.product_sku_id,
            quantity: parseInt(item.quantity),
            unit_cost_price: parseFloat(item.unit_cost_price)
          };
          
          if (item.id && !item.temp_id) {
            itemData.id = item.id;
          }
          
          return itemData;
        });

        const orderData = {
          purchase_order: {
            ...this.orderForm,
            items: processedItems
          }
        };

        this.saving = true;
        try {
          const response = await fetch(`/aruna_solar/api/v1/purchase_orders/${this.orderId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify(orderData)
          });

          const data = await response.json();

          if (response.ok) {
            this.$q.notify({
              type: 'positive',
              message: data.message
            });
            
            setTimeout(() => {
              window.location.href = `/purchase_orders/${this.orderId}`;
            }, 1000);
          } else {
            throw new Error(data.errors?.join(', ') || data.message || 'Failed to update order');
          }
        } catch (error) {
          this.$q.notify({
            type: 'negative',
            message: error.message
          });
        } finally {
          this.saving = false;
        }
      },

      formatCurrency(amount) {
        return new Intl.NumberFormat('en-IN').format(amount || 0);
      },

      goBack() {
        window.location.href = `/purchase_orders/${this.orderId}`;
      },

      logout() {
        fetch('/logout', {
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          }
        }).then(() => {
          window.location.href = '/login';
        });
      }
    }
  }).use(Quasar);
  
  app.mount('#app');
});
</script>
</body>
</html>