<!-- app/views/api/v1/sales/index.html.erb - WITH PAGINATION & LOADING -->
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Sales Management - Aruna Solar</title>
  
  <!-- Preload critical resources -->
  <link rel="preload" href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900|Material+Icons" as="style">
  <link rel="preload" href="https://cdn.jsdelivr.net/npm/quasar@2.14.2/dist/quasar.prod.css" as="style">
  <link rel="preload" href="https://cdn.jsdelivr.net/npm/vue@3.3.4/dist/vue.global.min.js" as="script">
  <link rel="preload" href="https://cdn.jsdelivr.net/npm/quasar@2.14.2/dist/quasar.umd.min.js" as="script">
  
  <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900|Material+Icons" rel="stylesheet" type="text/css">
  <link href="https://cdn.jsdelivr.net/npm/quasar@2.14.2/dist/quasar.prod.css" rel="stylesheet" type="text/css">
  
  <!-- Smart loading styles -->
  <style>
    [v-cloak] {
      display: none !important;
    }
    
    .smart-loader {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: #fafafa;
      display: none;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      font-family: 'Roboto', sans-serif;
    }
    
    .smart-loader.show {
      display: flex;
    }
    
    .loader-content {
      text-align: center;
      animation: fadeInUp 0.3s ease-out;
    }
    
    .loader-icon {
      width: 48px;
      height: 48px;
      margin: 0 auto 16px;
      border: 3px solid #e3f2fd;
      border-top: 3px solid #1976d2;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loader-title {
      font-size: 18px;
      font-weight: 500;
      color: #1976d2;
      margin-bottom: 8px;
    }
    
    .loader-message {
      font-size: 14px;
      color: #666;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .skeleton-fallback {
      display: none;
      background: #f5f5f5;
      min-height: 100vh;
      padding: 20px;
      font-family: 'Roboto', sans-serif;
    }
    
    .skeleton-fallback.show {
      display: block;
    }
    
    .skeleton-header {
      background: #1976d2;
      color: white;
      height: 64px;
      display: flex;
      align-items: center;
      padding: 0 16px;
      margin: -20px -20px 20px -20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .skeleton-card {
      background: white;
      border-radius: 8px;
      padding: 24px;
      margin-bottom: 24px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .skeleton-line {
      height: 16px;
      background: linear-gradient(90deg, #e0e0e0 25%, #f0f0f0 50%, #e0e0e0 75%);
      background-size: 200% 100%;
      animation: shimmer 1.5s infinite;
      border-radius: 4px;
      margin-bottom: 12px;
    }
    
    .skeleton-line.title {
      height: 24px;
      width: 60%;
    }
    
    .skeleton-line.subtitle {
      width: 40%;
    }
    
    .skeleton-line.full {
      width: 100%;
    }
    
    .skeleton-line.half {
      width: 50%;
    }
    
    @keyframes shimmer {
      0% { background-position: -200% 0; }
      100% { background-position: 200% 0; }
    }
    
    .app-container {
      opacity: 0;
      transition: opacity 0.3s ease-in;
    }
    
    .app-container.loaded {
      opacity: 1;
    }
  </style>
</head>
<body>

<!-- Smart loader -->
<div id="smart-loader" class="smart-loader">
  <div class="loader-content">
    <div class="loader-icon"></div>
    <div class="loader-title">Loading Sales...</div>
    <div class="loader-message">Preparing your sales data</div>
  </div>
</div>

<!-- Skeleton fallback -->
<div id="skeleton-fallback" class="skeleton-fallback">
  <div class="skeleton-header">
    <span style="font-size: 20px; font-weight: 500;">‚Üê | üìä Sales Management</span>
  </div>
  <div class="skeleton-card">
    <div class="skeleton-line title"></div>
    <div class="skeleton-line subtitle"></div>
  </div>
  <div class="skeleton-card">
    <div class="skeleton-line full"></div>
    <div class="skeleton-line half"></div>
    <div class="skeleton-line full"></div>
  </div>
</div>

<!-- Main app -->
<div id="app" v-cloak class="app-container">
  <q-layout view="hHh Lpr lff">
    <!-- Header -->
    <q-header elevated class="bg-primary">
      <q-toolbar>
        <q-btn flat @click="goToDashboard" icon="arrow_back" label="Dashboard"></q-btn>
        <q-separator vertical inset class="q-mx-sm"></q-separator>
        <q-icon name="receipt_long" size="md" class="q-mr-sm"></q-icon>
        <q-toolbar-title>Sales Management</q-toolbar-title>
        <q-space></q-space>
        <q-btn flat @click="logout" icon="logout" label="Logout"></q-btn>
      </q-toolbar>
    </q-header>

    <!-- Page Content -->
    <q-page-container>
      <q-page class="q-pa-md">
        
        <!-- Page Header -->
        <div class="row items-center justify-between q-mb-lg">
          <div>
            <div class="text-h4 q-mb-sm">
              <q-icon name="receipt_long" class="q-mr-sm"></q-icon>
              Sales Management
            </div>
            <div class="text-subtitle1 text-grey-7">
              Manage customer sales and track payments
            </div>
          </div>
          <q-btn 
            color="green" 
            icon="add" 
            label="New Sale" 
            size="lg"
            @click="createNewSale"
          ></q-btn>
        </div>

        <!-- Filters Card -->
        <q-card class="q-mb-lg">
          <q-card-section>
            <div class="row items-center justify-between q-mb-md">
              <div class="text-h6">
                <q-icon name="filter_list" class="q-mr-sm"></q-icon>
                Filters
              </div>
              <q-btn
                color="grey-6"
                icon="clear"
                @click="clearAllFilters"
                size="sm"
                outline
                round
              >
                <q-tooltip>Clear All Filters</q-tooltip>
              </q-btn>
            </div>
            <div class="row q-gutter-md">
              <div class="col-12 col-md-2">
                <q-select
                  v-model="filters.branch_id"
                  filled
                  label="Branch"
                  :options="branchOptions"
                  option-value="id"
                  option-label="name"
                  emit-value
                  map-options
                  clearable
                  @update:model-value="applyFilters"
                ></q-select>
              </div>
              <div class="col-12 col-md-3">
                <q-input
                  v-model="filters.customer"
                  filled
                  label="Customer Name"
                  placeholder="Search by customer name"
                  clearable
                  @input="onFilterInput"
                  @clear="onInputClear"
                  debounce="300"
                >
                  <template v-slot:prepend>
                    <q-icon name="search"></q-icon>
                  </template>
                </q-input>
              </div>
              <div class="col-12 col-md-2">
                <q-select
                  v-model="filters.status"
                  filled
                  label="Payment Status"
                  :options="statusFilterOptions"
                  option-value="value"
                  option-label="label"
                  emit-value
                  map-options
                  clearable
                  @update:model-value="applyFilters"
                ></q-select>
              </div>
              <div class="col-12 col-md-2">
                <q-select
                  v-model="filters.sale_status"
                  filled
                  label="Sale Status"
                  :options="saleStatusOptions"
                  option-value="value"
                  option-label="label"
                  emit-value
                  map-options
                  clearable
                  @update:model-value="applyFilters"
                ></q-select>
              </div>
              <div class="col-12 col-md-3">
                <div class="row q-gutter-sm">
                  <div class="col">
                    <q-input
                      v-model="filters.start_date"
                      filled
                      label="From Date"
                      type="date"
                      @update:model-value="applyFilters"
                    ></q-input>
                  </div>
                  <div class="col">
                    <q-input
                      v-model="filters.end_date"
                      filled
                      label="To Date"
                      type="date"
                      @update:model-value="applyFilters"
                    ></q-input>
                  </div>
                </div>
              </div>
            </div>
          </q-card-section>
        </q-card>

        <!-- Sales Table -->
        <q-card>
          <q-card-section>
            <q-table
              :rows="sales"
              :columns="columns"
              :loading="loading"
              :pagination="pagination"
              @request="onRequest"
              row-key="id"
              flat
              bordered
            >
              <template v-slot:body-cell-invoice_number="props">
                <q-td :props="props">
                  <div class="text-weight-medium text-primary cursor-pointer" @click="viewSale(props.row.id)">
                    {{ props.value }}
                  </div>
                </q-td>
              </template>

              <template v-slot:body-cell-customer="props">
                <q-td :props="props">
                  <div class="text-weight-medium">{{ props.row.customer_name }}</div>
                  <div class="text-caption text-grey-7" v-if="props.row.customer_phone">
                    {{ props.row.customer_phone }}
                  </div>
                </q-td>
              </template>

              <template v-slot:body-cell-branch_name="props">
                <q-td :props="props">
                  <q-badge color="blue" outline>
                    {{ props.value }}
                  </q-badge>
                </q-td>
              </template>

              <template v-slot:body-cell-amounts="props">
                <q-td :props="props">
                  <div class="text-weight-bold">‚Çπ{{ formatCurrency(props.row.final_amount) }}</div>
                  <div class="text-caption" v-if="props.row.paid_amount > 0">
                    <span class="text-green">Paid: ‚Çπ{{ formatCurrency(props.row.paid_amount) }}</span>
                  </div>
                  <div class="text-caption" v-if="props.row.due_amount > 0">
                    <span class="text-red">Due: ‚Çπ{{ formatCurrency(props.row.due_amount) }}</span>
                  </div>
                </q-td>
              </template>

              <template v-slot:body-cell-sale_status="props">
                <q-td :props="props">
                  <q-badge 
                    :color="getSaleStatusColor(props.value)" 
                    :label="props.value === 'draft' ? 'DRAFT' : 'CONFIRMED'"
                  ></q-badge>
                </q-td>
              </template>

              <template v-slot:body-cell-payment_status="props">
                <q-td :props="props">
                  <q-badge 
                    :color="getPaymentStatusColor(props.value, props.row.is_overdue)" 
                    :label="props.value.toUpperCase()"
                  ></q-badge>
                  <div v-if="props.row.is_overdue" class="text-caption text-red q-mt-xs">
                    {{ props.row.days_overdue }} days overdue
                  </div>
                </q-td>
              </template>

              <template v-slot:body-cell-actions="props">
                <q-td :props="props">
                  <q-btn-group flat>
                    <q-btn
                      flat
                      dense
                      color="primary"
                      icon="visibility"
                      @click="viewSale(props.row.id)"
                    >
                      <q-tooltip>View Details</q-tooltip>
                    </q-btn>
                    <q-btn
                      v-if="props.row.can_edit"
                      flat
                      dense
                      color="orange"
                      icon="edit"
                      @click="editSale(props.row.id)"
                    >
                      <q-tooltip>Edit Sale</q-tooltip>
                    </q-btn>
                    <q-btn
                      v-if="props.row.can_add_payments"
                      flat
                      dense
                      color="green"
                      icon="payment"
                      @click="addPayment(props.row.id)"
                    >
                      <q-tooltip>Add Payment</q-tooltip>
                    </q-btn>
                    <q-btn
                      v-if="props.row.can_confirm"
                      flat
                      dense
                      color="blue"
                      icon="check_circle"
                      @click="confirmSale(props.row)"
                    >
                      <q-tooltip>Confirm Sale</q-tooltip>
                    </q-btn>
                  </q-btn-group>
                </q-td>
              </template>

              <!-- Custom pagination slot -->
              <template v-slot:bottom>
                <div class="full-width row justify-between items-center">
                  <div class="row items-center q-gutter-sm">
                    <span class="text-body2">Rows per page:</span>
                    <q-select
                      v-model="pagination.rowsPerPage"
                      :options="rowsPerPageOptions"
                      dense
                      outlined
                      @update:model-value="onRowsPerPageChange"
                      style="min-width: 80px"
                    />
                  </div>
                  
                  <div class="row items-center q-gutter-sm">
                    <span class="text-body2">
                      {{ getResultsText() }}
                    </span>
                  </div>

                  <q-pagination
                    v-model="pagination.page"
                    :max="pagination.totalPages"
                    :max-pages="6"
                    direction-links
                    boundary-links
                    @update:model-value="onPageChange"
                  />
                </div>
              </template>
            </q-table>
          </q-card-section>
        </q-card>

      </q-page>
    </q-page-container>
  </q-layout>
</div>

<script src="https://cdn.jsdelivr.net/npm/vue@3.3.4/dist/vue.global.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/quasar@2.14.2/dist/quasar.umd.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
  // Smart loading logic
  const smartLoader = document.getElementById('smart-loader');
  const skeletonFallback = document.getElementById('skeleton-fallback');
  const appContainer = document.getElementById('app');
  
  let loadingTimers = {
    showLoader: null,
    showSkeleton: null
  };
  
  // Show simple loader only if loading takes more than 800ms
  loadingTimers.showLoader = setTimeout(() => {
    if (smartLoader) {
      smartLoader.classList.add('show');
    }
  }, 800);
  
  // Show skeleton only if loading takes more than 2 seconds
  loadingTimers.showSkeleton = setTimeout(() => {
    if (smartLoader) {
      smartLoader.classList.remove('show');
    }
    if (skeletonFallback) {
      skeletonFallback.classList.add('show');
    }
  }, 2000);
  
  function hideAllLoaders() {
    Object.values(loadingTimers).forEach(timer => {
      if (timer) clearTimeout(timer);
    });
    
    if (smartLoader) {
      smartLoader.classList.remove('show');
    }
    if (skeletonFallback) {
      skeletonFallback.classList.remove('show');
    }
    
    if (appContainer) {
      appContainer.classList.add('loaded');
    }
  }

  const app = Vue.createApp({
    data() {
      return {
        sales: [],
        loading: false,
        branchOptions: [],
        filters: {
          branch_id: null,
          customer: '',
          status: null,
          sale_status: null,
          start_date: '',
          end_date: ''
        },
        pagination: {
          sortBy: 'sale_date',
          descending: true,
          page: 1,
          rowsPerPage: 20,
          rowsNumber: 0,
          totalPages: 0
        },
        rowsPerPageOptions: [10, 20, 30, 50],
        statusFilterOptions: [
          { label: 'All Payments', value: null },
          { label: 'Completed', value: 'completed' },
          { label: 'Partial', value: 'partial' },
          { label: 'Pending', value: 'pending' },
          { label: 'Overdue', value: 'overdue' }
        ],
        saleStatusOptions: [
          { label: 'All Sales', value: null },
          { label: 'Draft', value: '0' },
          { label: 'Confirmed', value: '1' }
        ],
        columns: [
          { name: 'invoice_number', label: 'Invoice #', align: 'left', field: 'invoice_number', sortable: true },
          { name: 'customer', label: 'Customer', align: 'left', field: 'customer_name' },
          { name: 'branch_name', label: 'Branch', align: 'left', field: 'branch_name', sortable: true },
          { name: 'sale_date', label: 'Sale Date', align: 'center', field: 'sale_date', sortable: true },
          { name: 'amounts', label: 'Amount Details', align: 'right' },
          { name: 'sale_status', label: 'Sale Status', align: 'center', field: 'sale_status' },
          { name: 'payment_status', label: 'Payment Status', align: 'center', field: 'payment_status' },
          { name: 'actions', label: 'Actions', align: 'center' }
        ]
      }
    },
    mounted() {
      hideAllLoaders();
      this.loadOptions();
      this.loadSales();
    },
    methods: {
      async loadOptions() {
        try {
          const response = await fetch('/aruna_solar/api/v1/sales/options', {
            headers: {
              'Accept': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
          });

          const data = await response.json();
          
          if (response.ok) {
            this.branchOptions = data.branches || [];
          }
        } catch (error) {
          console.error('Error loading options:', error);
        }
      },

      async loadSales() {
        this.loading = true;
        try {
          const perPage = Math.max(1, this.pagination.rowsPerPage || 20);
          
          const params = new URLSearchParams({
            page: this.pagination.page || 1,
            per_page: perPage,
            ...this.getCleanFilters()
          });

          const response = await fetch(`/aruna_solar/api/v1/sales/list?${params}`, {
            headers: {
              'Accept': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
          });

          const data = await response.json();
          
          if (response.ok) {
            this.sales = data.data.sales;
            this.pagination.rowsNumber = data.data.pagination.total_count;
            this.pagination.totalPages = data.data.pagination.total_pages;
          } else {
            throw new Error(data.message || 'Failed to load sales');
          }
        } catch (error) {
          this.$q.notify({
            type: 'negative',
            message: error.message
          });
        } finally {
          this.loading = false;
        }
      },

      getCleanFilters() {
        const cleanFilters = {};
        
        if (this.filters.branch_id !== null && this.filters.branch_id !== '') {
          cleanFilters.branch_id = this.filters.branch_id;
        }
        if (this.filters.customer && this.filters.customer.trim() !== '') {
          cleanFilters.customer = this.filters.customer;
        }
        if (this.filters.status !== null && this.filters.status !== '') {
          cleanFilters.status = this.filters.status;
        }
        if (this.filters.sale_status !== null && this.filters.sale_status !== '') {
          cleanFilters.sale_status = this.filters.sale_status;
        }
        if (this.filters.start_date) {
          cleanFilters.start_date = this.filters.start_date;
        }
        if (this.filters.end_date) {
          cleanFilters.end_date = this.filters.end_date;
        }
        
        return cleanFilters;
      },

      applyFilters() {
        this.pagination.page = 1;
        this.loadSales();
      },

      onFilterInput() {
        this.applyFilters();
      },

      onInputClear() {
        this.$nextTick(() => {
          this.applyFilters();
        });
      },

      clearAllFilters() {
        this.filters = {
          branch_id: null,
          customer: '',
          status: null,
          sale_status: null,
          start_date: '',
          end_date: ''
        };
        this.pagination.page = 1;
        this.loadSales();
      },

      onRequest(props) {
        this.pagination.page = props.pagination.page;
        this.pagination.rowsPerPage = Math.max(1, props.pagination.rowsPerPage || 20);
        this.pagination.sortBy = props.pagination.sortBy;
        this.pagination.descending = props.pagination.descending;
        this.loadSales();
      },

      onPageChange(page) {
        this.pagination.page = page;
        this.loadSales();
      },

      onRowsPerPageChange(rowsPerPage) {
        this.pagination.rowsPerPage = Math.max(1, rowsPerPage || 20);
        this.pagination.page = 1;
        this.loadSales();
      },

      getResultsText() {
        const start = ((this.pagination.page - 1) * this.pagination.rowsPerPage) + 1;
        const end = Math.min(this.pagination.page * this.pagination.rowsPerPage, this.pagination.rowsNumber);
        return `${start}-${end} of ${this.pagination.rowsNumber}`;
      },

      getSaleStatusColor(status) {
        return status === 'draft' ? 'orange' : 'green';
      },

      getPaymentStatusColor(status, isOverdue) {
        if (isOverdue) return 'red';
        
        switch (status) {
          case 'completed': return 'green';
          case 'partial': return 'orange';
          case 'pending': return 'blue';
          default: return 'grey';
        }
      },

      formatCurrency(amount) {
        return new Intl.NumberFormat('en-IN').format(amount || 0);
      },

      createNewSale() {
        window.location.href = '/sales/new';
      },

      viewSale(saleId) {
        window.location.href = `/sales/${saleId}`;
      },

      editSale(saleId) {
        window.location.href = `/sales/${saleId}/edit`;
      },

      addPayment(saleId) {
        window.location.href = `/sales/${saleId}/payment`;
      },

      async confirmSale(sale) {
        this.$q.dialog({
          title: 'Confirm Sale',
          message: `Confirm sale ${sale.invoice_number}? This will deduct inventory and lock the sale for editing.`,
          cancel: true,
          persistent: true,
          ok: {
            label: 'Confirm Sale',
            color: 'green'
          }
        }).onOk(async () => {
          try {
            const response = await fetch(`/aruna_solar/api/v1/sales/${sale.id}/confirm`, {
              method: 'POST',
              headers: {
                'Accept': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
              }
            });

            const data = await response.json();

            if (response.ok && data.success) {
              this.$q.notify({
                type: 'positive',
                message: data.message
              });
              this.loadSales();
            } else {
              throw new Error(data.errors?.join(', ') || 'Failed to confirm sale');
            }
          } catch (error) {
            this.$q.notify({
              type: 'negative',
              message: error.message
            });
          }
        });
      },

      goToDashboard() {
        window.location.href = '/dashboard';
      },

      logout() {
        fetch('/logout', {
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          }
        }).then(() => {
          window.location.href = '/login';
        });
      }
    }
  }).use(Quasar);
  
  app.mount('#app');
});
</script>
</body>
</html>